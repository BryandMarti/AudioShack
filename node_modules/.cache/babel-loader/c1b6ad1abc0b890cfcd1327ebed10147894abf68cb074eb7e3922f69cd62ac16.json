{"ast":null,"code":"// import { useEffect, useRef, useState, useCallback } from 'react';\n// export const useCarousel = () => {\n//   const wrapperRef = useRef(null);\n//   const carouselRef = useRef(null);\n//   const [isDragging, setIsDragging] = useState(false);\n//   const [isAutoPlay] = useState(true);\n//   const [startX, setStartX] = useState(0);\n//   const [startScrollLeft, setStartScrollLeft] = useState(0);\n//   const [cardPerView, setCardPerView] = useState(0);\n//   const [firstCardWidth, setFirstCardWidth] = useState(0);\n\n//   useEffect(() => {\n//     const carousel = carouselRef.current;\n//     const firstCard = carousel.querySelector(\".card\");\n//     setFirstCardWidth(firstCard.offsetWidth);\n//     setCardPerView(Math.round(carousel.offsetWidth / firstCard.offsetWidth));\n\n//     const carouselChildren = [...carousel.children];\n//     carouselChildren.slice(-cardPerView).reverse().forEach(card => {\n//       carousel.insertAdjacentHTML(\"afterbegin\", card.outerHTML);\n//     });\n//     carouselChildren.slice(0, cardPerView).forEach(card => {\n//       carousel.insertAdjacentHTML(\"beforeend\", card.outerHTML);\n//     });\n\n//     carousel.classList.add(\"no-transition\");\n//     carousel.scrollLeft = carousel.offsetWidth;\n//     carousel.classList.remove(\"no-transition\");\n//   }, [cardPerView]);\n\n//   const dragStart = (e) => {\n//     setIsDragging(true);\n//     carouselRef.current.classList.add(\"dragging\");\n//     setStartX(e.pageX);\n//     setStartScrollLeft(carouselRef.current.scrollLeft);\n//   };\n\n//   const dragging = (e) => {\n//     if (!isDragging) return;\n//     carouselRef.current.scrollLeft = startScrollLeft - (e.pageX - startX);\n//   };\n\n//   const dragStop = () => {\n//     setIsDragging(false);\n//     carouselRef.current.classList.remove(\"dragging\");\n//   };\n\n//   const infiniteScroll = () => {\n//     const carousel = carouselRef.current;\n//     if (carousel.scrollLeft === 0) {\n//       carousel.classList.add(\"no-transition\");\n//       carousel.scrollLeft = carousel.scrollWidth - (2 * carousel.offsetWidth);\n//       carousel.classList.remove(\"no-transition\");\n//     } else if (Math.ceil(carousel.scrollLeft) === carousel.scrollWidth - carousel.offsetWidth) {\n//       carousel.classList.add(\"no-transition\");\n//       carousel.scrollLeft = carousel.offsetWidth;\n//       carousel.classList.remove(\"no-transition\");\n//     }\n\n//     clearTimeout(autoPlayTimeoutRef.current);\n//     if (!wrapperRef.current.matches(\":hover\")) autoPlay();\n//   };\n\n//   const autoPlayTimeoutRef = useRef(null);\n//   const autoPlay = useCallback(() => {\n//     if (window.innerWidth < 800 || !isAutoPlay) return;\n//     autoPlayTimeoutRef.current = setTimeout(() => {\n//       carouselRef.current.scrollLeft += firstCardWidth;\n//     }, 2500);\n//   }, [isAutoPlay, firstCardWidth]);\n\n//   useEffect(() => {\n//     autoPlay();\n//     return () => clearTimeout(autoPlayTimeoutRef.current);\n//   }, [isAutoPlay, firstCardWidth, autoPlay]);\n\n//   const handleArrowClick = (direction) => {\n//     carouselRef.current.scrollLeft += direction === 'left' ? -firstCardWidth : firstCardWidth;\n//   };\n\n//   return {\n//     wrapperRef,\n//     carouselRef,\n//     dragStart,\n//     dragging,\n//     dragStop,\n//     infiniteScroll,\n//     autoPlay,\n//     handleArrowClick\n//   };\n// };\n\n// export default useCarousel;","map":{"version":3,"names":[],"sources":["/Users/Bryandmr/Desktop/React/audioslave/src/scripts_css/carouselLogic.js"],"sourcesContent":["// import { useEffect, useRef, useState, useCallback } from 'react';\n// export const useCarousel = () => {\n//   const wrapperRef = useRef(null);\n//   const carouselRef = useRef(null);\n//   const [isDragging, setIsDragging] = useState(false);\n//   const [isAutoPlay] = useState(true);\n//   const [startX, setStartX] = useState(0);\n//   const [startScrollLeft, setStartScrollLeft] = useState(0);\n//   const [cardPerView, setCardPerView] = useState(0);\n//   const [firstCardWidth, setFirstCardWidth] = useState(0);\n\n//   useEffect(() => {\n//     const carousel = carouselRef.current;\n//     const firstCard = carousel.querySelector(\".card\");\n//     setFirstCardWidth(firstCard.offsetWidth);\n//     setCardPerView(Math.round(carousel.offsetWidth / firstCard.offsetWidth));\n\n//     const carouselChildren = [...carousel.children];\n//     carouselChildren.slice(-cardPerView).reverse().forEach(card => {\n//       carousel.insertAdjacentHTML(\"afterbegin\", card.outerHTML);\n//     });\n//     carouselChildren.slice(0, cardPerView).forEach(card => {\n//       carousel.insertAdjacentHTML(\"beforeend\", card.outerHTML);\n//     });\n\n//     carousel.classList.add(\"no-transition\");\n//     carousel.scrollLeft = carousel.offsetWidth;\n//     carousel.classList.remove(\"no-transition\");\n//   }, [cardPerView]);\n\n//   const dragStart = (e) => {\n//     setIsDragging(true);\n//     carouselRef.current.classList.add(\"dragging\");\n//     setStartX(e.pageX);\n//     setStartScrollLeft(carouselRef.current.scrollLeft);\n//   };\n\n//   const dragging = (e) => {\n//     if (!isDragging) return;\n//     carouselRef.current.scrollLeft = startScrollLeft - (e.pageX - startX);\n//   };\n\n//   const dragStop = () => {\n//     setIsDragging(false);\n//     carouselRef.current.classList.remove(\"dragging\");\n//   };\n\n//   const infiniteScroll = () => {\n//     const carousel = carouselRef.current;\n//     if (carousel.scrollLeft === 0) {\n//       carousel.classList.add(\"no-transition\");\n//       carousel.scrollLeft = carousel.scrollWidth - (2 * carousel.offsetWidth);\n//       carousel.classList.remove(\"no-transition\");\n//     } else if (Math.ceil(carousel.scrollLeft) === carousel.scrollWidth - carousel.offsetWidth) {\n//       carousel.classList.add(\"no-transition\");\n//       carousel.scrollLeft = carousel.offsetWidth;\n//       carousel.classList.remove(\"no-transition\");\n//     }\n\n//     clearTimeout(autoPlayTimeoutRef.current);\n//     if (!wrapperRef.current.matches(\":hover\")) autoPlay();\n//   };\n\n//   const autoPlayTimeoutRef = useRef(null);\n//   const autoPlay = useCallback(() => {\n//     if (window.innerWidth < 800 || !isAutoPlay) return;\n//     autoPlayTimeoutRef.current = setTimeout(() => {\n//       carouselRef.current.scrollLeft += firstCardWidth;\n//     }, 2500);\n//   }, [isAutoPlay, firstCardWidth]);\n  \n//   useEffect(() => {\n//     autoPlay();\n//     return () => clearTimeout(autoPlayTimeoutRef.current);\n//   }, [isAutoPlay, firstCardWidth, autoPlay]);\n  \n\n//   const handleArrowClick = (direction) => {\n//     carouselRef.current.scrollLeft += direction === 'left' ? -firstCardWidth : firstCardWidth;\n//   };\n\n//   return {\n//     wrapperRef,\n//     carouselRef,\n//     dragStart,\n//     dragging,\n//     dragStop,\n//     infiniteScroll,\n//     autoPlay,\n//     handleArrowClick\n//   };\n// };\n\n// export default useCarousel;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}